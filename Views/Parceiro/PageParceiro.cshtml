<!-- Namespace da classe de Modelo-->
@model ReciGanhaMVC.Models.ParceiroViewModel



<style>
  #tituloParceiro{
    color: white;
  }

  #parceiros-cad{
    background-color: #003829;
  }

  .textolateral{
    color: #003829;
  }

  .footer-parceiros{
    display:flex;
    background-color: #003829;
  }

  .footerFluid{
    padding-left: 0px;
    padding-right: 0px;
    height: 3vh;
  }

  #imagens{
    display: flex;
    justify-content: space-around;
    padding-top: 4vh;
    padding-left: 15vw;
    flex-wrap: wrap;
  }

  #bkimg{
      width: 159px;
      height: 156px;
      margin-right: 15vw;
  }

  .ajustepd{
    padding-top: 3vh;
  }

  #imgparceiro{
    width: 342px;
    padding-top: 3%;
  }
</style>
<!-- Erro not found-->


<!-- Titulo da view-->
@{
    ViewBag.Title = "ParceiroHome";
}

<!--Configuração da mensagem Temporaria-->
@if (@TempData["MensagemErro"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["MensagemErro"]
    </div>
}

<div class="content">
    <div class="container">
      <div class="limiter">
		<div class="container-login100">
			<div class="wrap-login100" id="parceiros-cad">
          <div class="login100-pic js-tilt" id="imgparceiro" data-tilt>
            <img src="assets/img/imageParceiroDois.png" alt="mão parceria">
          </div>

          @using (Html.BeginForm("Registrar", "Parceiro", FormMethod.Post, new{@class="login100-form validate-form"}))
                  {
            <!--É um método que gera e insere no HTML gerado na view um código para evitar que se falsifique o envio de dados para o servidor.-->
            @Html.AntiForgeryToken()
            <h3 class="login100-form-title" id="tituloParceiro">
              SEJA ASSOCIADA
            </h3>
            <div class="wrap-input100 validate-input" data-validate = "nome de usuario requerido">
              @Html.TextBoxFor(model => model.NomeParceiro, new { @class = "form-control",@placeholder="Nome da empresa", @name = "nome"} )
            </div>
            <div class="wrap-input100 validate-input" data-validate = "Valid email is required: ex@abc.xyz">
              @Html.TextBoxFor(model => model.CnpjParceiro, new {@class = "form-control", @placeholder="CNPJ",@name = "cnpj"})
              <span class="focus-input100"></span>
            </div>
            <div class="wrap-input100 validate-input" data-validate = "Password is required">
              @Html.TextBoxFor(model => model.EmailParceiro, new {@class = "form-control", @name = "EmailParceiro", @placeholder="EmailParceiro"})
              <span class="focus-input100"></span>
            </div>
          
                    <div class="wrap-input100 validate-input" data-validate = "Password is required">
              @Html.TextBoxFor(model => model.PasswordString, new{@class = "form-control", @name = "senha", @placeholder="Senha",@type="senha"})
              <span class="focus-input100"></span>
            </div>
            <div class="container-login100-form-btn">
              <button class="login100-form-btn">
                Cadastrar
              </button>
            </div>
          }
			</div>
		</div>
</div>
</div>

<div class="container-fluid footerFluid">
  <footer class="footer-parceiros">
    <div id="imagens">

        <a href="https://www.burgerking.com.br/" target="blank"><img src="assets/img/logoBK-removebg-preview.png" class="d-flex"  id="bkimg"></a>
      
        <a href="https://www.cea.com.br/?utm_source=delorean&utm_medium=minhacea&utm_campaign=poupenaweb22&gclid=Cj0KCQiAkMGcBhCSARIsAIW6d0BleoEFJcN7USAI5OA9FHeBmpiPFqBTQPBbA26FTnCLXoTY0f1JMrQaAuzTEALw_wcB" target="blank"><img src="assets/img/c_a-removebg-preview.png" class="ajustepd d-flex w-25" ></a>

         <a href="https://developer.mozilla.org/pt-BR/docs/Learn/JavaScript/First_steps/What_is_JavaScript" target="blank"><img src="assets/img/espaco-removebg-preview.png" class="ajustepd d-flex w-25" ></a>

  </div>
  </footer>
</div>



